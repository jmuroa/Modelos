{ Analytica Model Mest_5_1_Overbooking, encoding="UTF-8" }
SoftwareVersion 5.2.9


{ System Variables with non-default values: }
SampleSize := 10K
TypeChecking := 1
Checking := 1
SaveOptions := 2
SaveValues := 0

NodeInfo FormNode: 1,0,0,1,0,0,0,,0,0,,0,0



Model Mest_5_1_Overbooking
Description: Modelo en el que tenemos 10 de capacidad pero vendemos 11.~
Esta práctica, llamada 'Overbooking' es ampliamente usada en un gran número de sectores y se hacen utilidades y evitan pérdidas mediante su uso.~
La hemos desarrollado paso a paso para una mejor comprensión aunque la repetición de nodos y cálculos no es la manera más eficiente de resolver un dado caso o problema. ~
Cuando identifiquemos una repetición lo mejor es no replicarla y solo usar el nodo o cálculo original.
Author: Jorge
Date: lun, mar 11, 2019 1:06 p.m.
DiagState: 2,1,0,982,419,17
FontStyle: Arial,15
FileInfo: 0,Model Mest_5_1_Overbooking,2,2,0,0,C:\Users\Jorge\Documents\00 Libro Estadística\Modelos Libro\Cap 6-1.1 Overbooking (introducción).ana

Chance Binomial1
Title: Binomial(11,0.8) = 0
Description: Probabilidad binomial = 0
Definition: Binomial(11,0.8) = 0
NodeLocation: 88,48,1
NodeSize: 56,24
ValueState: 2,168,171,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial2
Title: Binomial(11,0.8) = 1
Description: Probabilidad binomial = 1
Definition: Binomial(11,0.8) = 1
NodeLocation: 88,109,1
NodeSize: 56,24
ValueState: 2,56,59,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial3
Title: Binomial(11,0.8) = 2
Description: Probabilidad binomial = 2
Definition: Binomial(11,0.8) = 2
NodeLocation: 88,170,1
NodeSize: 56,24
ValueState: 2,72,75,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial4
Title: Binomial(11,0.8) = 3
Description: Probabilidad binomial = 3
Definition: Binomial(11,0.8) = 3
NodeLocation: 88,231,1
NodeSize: 56,24
ValueState: 2,88,91,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial5
Title: Binomial(11,0.8) = 4
Description: Probabilidad binomial = 4
Definition: Binomial(11,0.8) = 4
NodeLocation: 88,292,1
NodeSize: 56,24
ValueState: 2,104,107,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial6
Title: Binomial(11,0.8) = 5
Description: Probabilidad binomial = 5
Definition: Binomial(11,0.8) = 5
NodeLocation: 88,352,1
NodeSize: 56,24
ValueState: 2,120,123,416,303,,MEAN
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Variable Resultados_individua
Att_PrevIndexValue: [Binomial1,Binomial2,Binomial3,Binomial4,Binomial5,Binomial6]
Title: Resultados~
individuales
Description: Ponemos corchete inicio [ y 'bajamos' mediante Alt+Clic todos los nodos Binomial() = 0..5~
Cerramos corchete ]~
Notemos que hecho puesto un check en Totals. De ahí el resultado de la suma.
Definition: [Binomial1,Binomial2,Binomial3,Binomial4,Binomial5,Binomial6]
NodeLocation: 248,360,1
NodeSize: 56,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,,0,1,0
ValueState: 2,294,123,416,303,,MEAN
NumberFormat: 2,F,4,3,0,0,4,1,$,0,"ABBREV",0,,,0,0,15
Att__TotalsIndex: [Self]
{!40700|Att_CellFormat: CellSpan(Resultados_individua,CellNumberFormat('Fixed Point',4,1,0,dateFormat:'ABBREV',fullPrecision:0,numbersAsDates:0,datesAsNumbers:0),7,header:0)}

Variable Suma
Title: Suma
Description: Suma de los nodos de probabilidad binomial:~
'Bajamos' cada nodo mediante Alt+Clic y ponemos el operador de suma + entre ellos antes o al bajarlos.
Definition: Binomial1+Binomial2+Binomial3+Binomial4+Binomial5+Binomial6
NodeLocation: 248,56,1
NodeSize: 48,24
ValueState: 2,264,267,416,303,,MEAN
NumberFormat: 2,D,3,2,0,0,3,1,$,0,"ABBREV",0,,,0,0,15

Chance Binomial___11
Title: Binomial = 11
Units: $
Description: Probabilidad que se presenten 11 pasajeros (=11) la que tendremos que multiplicar por $4200 que es lo que nos costará vender ese asiento demás si se presentara el pasajero 11 para el cual no hay sitio.
Definition: Prob_Binomial(11, 11, 0.8)*$4200
NodeLocation: 352,160,1
NodeSize: 48,24
ValueState: 2,168,171,416,303,,MIDM
NumberFormat: 2,F,3,2,0,0,3,1,$,0,"ABBREV",0,,,0,0,15

Variable Variante_multiplicat
Title: Variante multiplicativa
Units: $
Description: Multiplicamos $4200 por 0.8^11 que sería una manera 'manual' de hallar la probabilidad binomial.~
Se pone para fines comparativos solamente por cuanto es una manera ineficiente de cálculo al estar definido como una distribución de probabilidad la que no solo nos deja que pensar sea nuestra única tarea sino que tambiién nos evita cálculos engorrosos o innecesarios.
Definition: $4200*(0.8^11)
NodeLocation: 352,232,1
NodeSize: 56,24
ValueState: 2,248,251,416,303,,MIDM
NumberFormat: 2,F,4,2,0,0,4,1,$,0,"ABBREV",0,,,0,0,15

Variable Comparacion
Title: Comparación
Units: $
Description: Seleccionamos los nodos 'Binomial = 11' y 'Variante multiplicativa'.~
Previamente a cada nodo lo hemos formateado en cuanto a presentación vía Result --> Number Format --> Fixed Point seleccionamos Decimal digits 2 (dos decimales) y hacemos chec en todas las casillas para que nos muestre en moneda ($), y ceros de arrastre.
Definition: [Binomial___11,Variante_multiplicat]
NodeLocation: 504,200,1
NodeSize: 64,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,,0,1,0
ValueState: 2,168,171,416,303,,MEAN
NodeColor: 65535,19661,19661

{!40404|FreePassObjectCount SfpPnwS2Zy63DG2qVHcs9RTaQTdNvTos77E__X$W0GbfZbgseC6PdVfnVO_TE6aqgrxgK1kxaKgoJiUK5uoIaCD9ldTvWq1p_BOicIaBju_7GvH2reY2K$YUUPfIzeQoyUdYM3X2ZpryDbZJRAh5OSZgW8r$Y7iOgkHBtVBo8IlJTPqcAgEjxzbcfisc89XhSYbT3kZV1L8IEnfU8WztAVqGI6XEiyJTloaXYgOu$OYUXNL4YBBa$Qy4_WFpEi7NmGMEkRzMoBP36BGSEo0GUVjibeoY4GUgfrofzgP8FR2Z_BIHN3XPZntlmfJnYQu8okkcG3kAQGVm1PN7OqCOnv80L5qU0OYnAgme1b5PwAXX_sjV9FkFmZXhs_zshWFtPs3YC2vjOzU$Qky2xxXvhhnnVYiS_3Rdt11wzzthN1a3Rkp$nLSs4MYaVacZN4hHnAOVjX72Ojz53pw_zpYBpMk1AQGurDas00ox12whM0b$PaskOSk6OO0147H1ZQez8EKByaPLtBqqxumeHqE8Rm5XZNW0fvUASWvfY2AhEnSWehcInT2MgtB2qfT1gNynOKJHHjFrAIbq5cvXCsYSl4278qPnFn26Le3pcOCJl8MIJUnP4kQWpxwyxlinBe4Y738qrArNc8nnurjbEnBoj_6x3Iyb9btx4N_xlG40LTigazlbM94KdvDfUEeK_Efno5WG3rfdCZpyspmSwTA$9MYmAoW8U9y4FPbzZN3f$7MjC0tjbkEWPdooWJGLlCe60ysZT8jSJVkyCqnfAc5aZ_XPKEAV6Uevz96ofad$QqGz1tfVGm4hQUbhp3vXWuKh4nqkLFU0Mm4EHSlN2iOPm_vMC6xozUsxJtjdPzgFblCz42jhsc7NkQOQK0rY0Itachlr6FnNuRIVZKOlHl1Wk31SI7tVzDofhv8KNKD6vbBgX3ejYuGf2SuKnFkDkGoLwV5iKzcHyfM4qaL6vjXNE5zsmhdZXWVVWYbfkqw2BKUfr2GVl0HZtBWsDazNoDf7b4a5c9jHtT5iL0hM3nVF$mYMA_qhYRKFA520$$$137BGMTbku3ERes5LduBVp9VtFe2TvMpHnIpLuS1dDrU7oT9saJ2pbNB$qgXPIC62$ywvvwy$37DJRZis1CPds5LcvCWrBYvIh5XzQuNtOvS$Z9lM_dHydK1lUF$oaOD2vmfYSNJGDCBCDGJNSYfmv2DOan$EUl0JdxGczLk8Y_RvNsMsNwT2dErT6mR7qYH0nYK8xmcTLE72zvsqqpqsux05BIRaju3GUixBTk1Lg$Mj5VvKlCg9f9gDmKvV5iKzdI_gO6tdPC_odSJA3ysokhgffgilpuz4BKTdo$CPds6NfyFavFd$PqFh9d6c7eAjHsR2fIxcH_iQ9vgTG3tiYPHA3_vsqooopsvz39FMVeny8LYm0HYr9To9WuHh6Y_SwPvQzW4fErT5kP3lSAvfQB_nbQH7$unidZXVUUUWZdhmt_6FPamzAPfvASm4Ok5TrEe3VyQvPvRzX5gGuV7nS7qXF$lWI4uiYOG81xsnkihggiknrw$6EMWgr1EShxCTm3Oj3QoAa$QtKpHnIqNxW5iJxaFvcI$kUE$nbPD3wohaUPLIGEEFHKNRWckr_8IUgu6Lbt8Rl3Pl7VuIj9c4Y2Z3c9jIuU6lO3jQ7raJ4sfSG6yphaTOKGECBBCEHLQVbjr$9JViw9OfwCVp9UrDc$QrHkChBiEmKuT3gJybGyeL4paK7vjYOE6_tniebZXXXYbejnt_6FOZkw8Mbr5NgzIdzKi5VwLoFkDjFmJtS1eGuXCsZGziRC_mZNC2vnfZUPLIGFFGIKNSXelt0ALWjw9OewCUo7SpAZyMnDg7b4a5c9jH}
Library Distribution_densiti
Title: Distribution Densities Library
Description: The functions in this library return the probability densities (for continuous distributions) and probabilities (for discrete distributions) for the standard distribution functions that are built into Analytica.  It also includes Cumulative distribution functions for continuous distributions and some discrete distributions, and inverse cumulative functions for most continuous distributions.~
~
Probability densities are useful for importance sampling.  In importance sampling, you can sample from a distribution different from your target distribution, and then weight each point by f_target(x) / f_sample(x), where f_target is the density (or prob) of your target distribution, f_sample the density (or prob) of your sample distribution.~
~
Cumulative distribution functions are used in classical hypothesis testing for determining the p-value (or significance level) of a hypothesis based on a data sample, and inverse cumulative distributions are used in finding confidence intervals.~
~
Of course PDF, CDF and Inverse CDF functions are used in many other areas of statistical analysis as well.
Author: Lonnie Chrisman, Ph.D.~
Lumina Decision Systems
Date: Fri, Nov 17, 2006 8:19 AM
DefaultSize: 48,24
NodeLocation: 720,80,1
NodeSize: 56,32
NodeInfo: 1,1,1,1,1,1,0,0,0,0,,,,0
DiagState: 2,47,22,388,321,17
WindState: 2,287,119,1071,750
FontStyle: Arial, 15
Att_PreLoadScript: {!40404|FreePassObjectCount SfpPnwS2Zy63DG2qVHcs9RTaQTdNvTos77E__X$W0GbfZbgseC6PdVfnVO_TE6aqgrxgK1kxaKgoJiUK5uoIaCD9ldTvWq1p_BOicIaBju_7GvH2reY2K$YUUPfIzeQoyUdYM3X2ZpryDbZJRAh5OSZgW8r$Y7iOgkHBtVBo8IlJTPqcAgEjxzbcfisc89XhSYbT3kZV1L8IEnfU8WztAVqGI6XEiyJTloaXYgOu$OYUXNL4YBBa$Qy4_WFpEi7NmGMEkRzMoBP36BGSEo0GUVjibeoY4GUgfrofzgP8FR2Z_BIHN3XPZntlmfJnYQu8okkcG3kAQGVm1PN7OqCOnv80L5qU0OYnAgme1b5PwAXX_sjV9FkFmZXhs_zshWFtPs3YC2vjOzU$Qky2xxXvhhnnVYiS_3Rdt11wzzthN1a3Rkp$nLSs4MYaVacZN4hHnAOVjX72Ojz53pw_zpYBpMk1AQGurDas00ox12whM0b$PaskOSk6OO0147H1ZQez8EKByaPLtBqqxumeHqE8Rm5XZNW0fvUASWvfY2AhEnSWehcInT2MgtB2qfT1gNynOKJHHjFrAIbq5cvXCsYSl4278qPnFn26Le3pcOCJl8MIJUnP4kQWpxwyxlinBe4Y738qrArNc8nnurjbEnBoj_6x3Iyb9btx4N_xlG40LTigazlbM94KdvDfUEeK_Efno5WG3rfdCZpyspmSwTA$9MYmAoW8U9y4FPbzZN3f$7MjC0tjbkEWPdooWJGLlCe60ysZT8jSJVkyCqnfAc5aZ_XPKEAV6Uevz96ofad$QqGz1tfVGm4hQUbhp3vXWuKh4nqkLFU0Mm4EHSlN2iOPm_vMC6xozUsxJtjdPzgFblCz42jhsc7NkQOQK0rY0Itachlr6FnNuRIVZKOlHl1Wk31SI7tVzDofhv8KNKD6vbBgX3ejYuGf2SuKnFkDkGoLwV5iKzcHyfM4qaL6vjXNE5zsmhdZXWVVWYbfkqw2BKUfr2GVl0HZtBWsDazNoDf7b4a5c9jHtT5iL0hM3nVF$mYMA_qhYRKFA520$$$137BGMTbku3ERes5LduBVp9VtFe2TvMpHnIpLuS1dDrU7oT9saJ2pbNB$qgXPIC62$ywvvwy$37DJRZis1CPds5LcvCWrBYvIh5XzQuNtOvS$Z9lM_dHydK1lUF$oaOD2vmfYSNJGDCBCDGJNSYfmv2DOan$EUl0JdxGczLk8Y_RvNsMsNwT2dErT6mR7qYH0nYK8xmcTLE72zvsqqpqsux05BIRaju3GUixBTk1Lg$Mj5VvKlCg9f9gDmKvV5iKzdI_gO6tdPC_odSJA3ysokhgffgilpuz4BKTdo$CPds6NfyFavFd$PqFh9d6c7eAjHsR2fIxcH_iQ9vgTG3tiYPHA3_vsqooopsvz39FMVeny8LYm0HYr9To9WuHh6Y_SwPvQzW4fErT5kP3lSAvfQB_nbQH7$unidZXVUUUWZdhmt_6FPamzAPfvASm4Ok5TrEe3VyQvPvRzX5gGuV7nS7qXF$lWI4uiYOG81xsnkihggiknrw$6EMWgr1EShxCTm3Oj3QoAa$QtKpHnIqNxW5iJxaFvcI$kUE$nbPD3wohaUPLIGEEFHKNRWckr_8IUgu6Lbt8Rl3Pl7VuIj9c4Y2Z3c9jIuU6lO3jQ7raJ4sfSG6yphaTOKGECBBCEHLQVbjr$9JViw9OfwCVp9UrDc$QrHkChBiEmKuT3gJybGyeL4paK7vjYOE6_tniebZXXXYbejnt_6FOZkw8Mbr5NgzIdzKi5VwLoFkDjFmJtS1eGuXCsZGziRC_mZNC2vnfZUPLIGFFGIKNSXelt0ALWjw9OewCUo7SpAZyMnDg7b4a5c9jH}
{!40400|Att_clearTypeFonts: -1}

Library Cumulative_densities
Title: Cumulative Densities
Author: Lonnie
Date: Wed, Aug 06, 2008 12:30 PM
DefaultSize: 48,24
NodeLocation: 80,104,1
NodeSize: 56,24
DiagState: 2,386,5,988,744,17

Function CumChiSquared(x, dof)
Title: Cum~
ChiSquared
Description: The cumulative probability at x for a Chi-squared distribution with dof degree-of-freedom.
Definition: GammaI(x/2,dof/2)
NodeLocation: 88,48,1
NodeSize: 56,24
WindState: 2,424,469,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumStudentT(t,dof)
Title: CumStudentT
Description: The cumulative distribution function function for the Student's T distribution with dof degrees of freedom.
Definition: var x := (t+sqrt(t^2+dof)) / (2*sqrt(t^2+dof));~
BetaI(x,dof/2,dof/2)
NodeLocation: 224,48,1
NodeSize: 64,24
WindState: 2,298,533,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumFDist(f,dof1,dof2)
Title: CumFDist
Description: The Cumulative Probability Function for the F-distribution.
Definition: BetaI( dof1*f / (dof1*f + dof2), dof1 / 2, dof2 / 2)
NodeLocation: 368,48,1
NodeSize: 56,24
WindState: 2,348,77,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumChiSquaredInv(p,dof)
Title: Cum~
ChiSquaredInv
Description: The inverse cumulative distribution function for the Chi Squared distribution with dof degrees of freedom.
Definition: 2*GammaIInv(p,dof/2)
NodeLocation: 88,120,1
NodeSize: 64,24
WindState: 2,293,90,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumStudentTInv(p,dof)
Title: CumStudentTInv
Description: The inverse cumulative distribution function for the Student's T distribution with dof degrees of freedom.
Definition: var x := BetaIInv(p,dof/2,dof/2);~
var a := (2*x-1)^2;~
(if p<0.5 then -1 else 1) * sqrt( dof * a / (1-a))~

NodeLocation: 232,120,1
NodeSize: 72,24
WindState: 2,447,319,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumFDistInv(p,dof1,dof2)
Title: CumFDistInv
Description: The Inverse Cumulative Probability Function for the F-distribution.
Definition: var x := BetaIInv( p, dof1 / 2, dof2 / 2);~
dof2 * x / ( dof1 * (1-x) )
NodeLocation: 376,120,1
NodeSize: 64,24
WindState: 2,376,499,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumExponential(x,rate)
Title: Cum~
Exponential
Description: Cumulative probability up to x of an Exponential distribution with given mean.   This is the area to the left of x.
Definition: (1 - exp(-x*rate)) * (x>=0)
NodeLocation: 88,232,1
NodeSize: 60,25
WindState: 2,102,83,728,314
{!40600|Att_WikiHelpURL: [wiki]}

Function CumExponentialInv(p,rate)
Title: Cum~
ExponentialInv
Description: The inverse cumulative distribution function for an Exponential distribution with given mean.
Definition: -ln(1-p) / rate
NodeLocation: 88,288,1
NodeSize: 64,24
WindState: 2,330,155,476,323
{!40600|Att_WikiHelpURL: [wiki]}

Function CumLogistic(x,mean ; scale : optional=1)
Title: Cum Logistic
Description: The cumulative probability function for the logistic distribution.  This gives the probability area to the left of x in a Logistic(mean,scale) distribution.
Definition: 1/(1+exp(-(x-mean)/scale))
NodeLocation: 216,232,1
NodeSize: 60,25
{!40600|Att_WikiHelpURL: [wiki]}

Function CumLogisticInv(p,mean ; scale : optional=1)
Title: Cum Logistic Inv
Description: The inverse cumulative distribution function for the logistic distribution.  This is the point x at which the area to the left of x is p.
Definition: mean - scale * ln(1/p - 1)
NodeLocation: 216,288,1
NodeSize: 60,25
WindState: 2,464,332,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumLogNormal(x ; median,gsdev,mean,stddev : optional atomic)
Title: Cum LogNormal
Description: The cumulative distribution function for the LogNormal distribution.~
This is the probability area to the left of x.~
You must specify x and then any two of distribution parameters.
Definition: if AnalyticaVersion >= 50103 Then ~
	::CumLogNormal(x,median,gsdev,mean,stddev)~
else begin ~
~
	if IsNotSpecified(median)+IsNotSpecified(gsdev)+~
	    IsNotSpecified(mean)+IsNotSpecified(stddev)<>2 ~
	then Error("You must specify exactly two of the distribution parameters to CumLogNormal");~
	~
	var w := 0;~
	if not IsNotSpecified(mean) and not IsNotSpecified(stddev) then (~
	   w := (stddev/mean)^2+1~
	);~
	~
	if IsNotSpecified(median) then (~
	  median := if IsNotSpecified(gsdev) then mean/sqrt(w)~
	                  else if IsNotSpecified(mean) then (~
	                            var tmp := exp(ln(gsdev)^2);~
	                            stddev/sqrt(tmp*(tmp-1))~
	                   ) else mean * exp(-ln(gsdev)^2/2)~
	);~
	~
	if IsNotSpecified(gsdev) then  (~
	  gsdev := if IsNotSpecified(median) then exp(sqrt(ln(w)))~
	                 else if IsNotSpecified(mean) then exp(sqrt(ln(1+sqrt(1+4*(stddev/median)^2))/2))~
	                 else exp(sqrt(2*ln(mean/median)))~
	);~
	~
	CumNormal(ln(x),ln(median),ln(gsdev))~
end
NodeLocation: 352,232,1
NodeSize: 60,24
WindState: 2,83,76,887,805
{!40600|Att_WikiHelpURL: [wiki]}

Function CumLogNormalInv(p ; median,gsdev,mean,stddev : optional atomic)
Title: Cum LogNormalInv
Description: The inverse cumulative distribution function for the LogNormal distribution.~
This is the value x such that the probability area to the left of x is p.~
You must specify p and then any two of distribution parameters.
Definition: If AnalyticaVersion>50103 then ~
	::CumLogNormalInv(p,median,gsdev,mean,stddev)~
Else begin~
	if IsNotSpecified(median)+IsNotSpecified(gsdev)+~
	    IsNotSpecified(mean)+IsNotSpecified(stddev)<>2 ~
	then Error("You must specify exactly two of the distribution parameters to CumLogNormalInv");~
	~
	var w := 0;~
	if not IsNotSpecified(mean) and not IsNotSpecified(stddev) then (~
	   w := (stddev/mean)^2+1~
	);~
	~
	if IsNotSpecified(median) then (~
	  median := if IsNotSpecified(gsdev) then mean/sqrt(w)~
	                  else if IsNotSpecified(mean) then (~
	                            var tmp := exp(ln(gsdev)^2);~
	                            stddev/sqrt(tmp*(tmp-1))~
	                   ) else mean * exp(-ln(gsdev)^2/2)~
	);~
	~
	if IsNotSpecified(gsdev) then  (~
	  gsdev := if IsNotSpecified(median) then exp(sqrt(ln(w)))~
	                 else if IsNotSpecified(mean) then exp(sqrt(ln(1+sqrt(1+4*(stddev/median)^2))/2))~
	                 else exp(sqrt(2*ln(mean/median)))~
	);~
	~
	exp(CumNormalInv(p,ln(median),ln(gsdev)))~
end
NodeLocation: 352,288,1
NodeSize: 64,24
WindState: 2,68,88,745,616
{!40600|Att_WikiHelpURL: [wiki]}

Function CumTriangular(x,min,mode,max)
Title: Cum Triangular
Description: The cumulative distribution function for the Triangular(min,mode,max) distribution.  This gives the probability area to the left of x.
Definition: var h := 2/(max-min);~
if x<min then 0~
else if x>max then 1~
else if x<mode then 0.5 * h * (x-min)^2 / (mode-min) ~
else 0.5 * (max-min) * h - 0.5 * h * (max-x)^2 / (max-mode)
NodeLocation: 88,384,1
NodeSize: 60,24
WindState: 2,573,38,477,260
{!40600|Att_WikiHelpURL: [wiki]}

Function CumTriangularInv(p,min,mode,max)
Title: Cum TriangularInv
Description: The inverse cumulative distribution function for a Triangular(min,mode,max) distribution.  This is the value where p area of probability mass is to the left.
Definition: var h := 2/(max-min);~
var a1 := 0.5 * (mode-min) * h;~
if p<=a1 then~
   min + sqrt(2*(mode-min) *p / h)~
else~
   max - sqrt(2*(max-mode)*(1-p) / h)
NodeLocation: 88,441,1
NodeSize: 60,24
WindState: 2,509,262,508,314
{!40600|Att_WikiHelpURL: [wiki]}

Function CumUniform(x,lb,ub)
Title: Cum Uniform
Description: The cumulative distribution function for the Uniform(lb,ub) distribution.
Definition: if x<lb then 0~
else if x>ub then 1 else~
(x-lb) / (ub-lb)
NodeLocation: 208,384,1
NodeSize: 48,24
WindState: 2,353,250,591,345
{!40600|Att_WikiHelpURL: [wiki]}

Function CumUniformInv(p,lb,ub)
Title: Cum UniformInv
Description: The inverse cumulative distribution function for the Uniform(lb,ub) distribution.
Definition: lb + p*(ub-lb)
NodeLocation: 208,440,1
NodeSize: 56,24
{!40600|Att_WikiHelpURL: [wiki]}

Function CumWeibull(x,shape ; scale : optional = 1 )
Title: Cum Weibull
Description: The cumulative distribution function for the Weibull distribution.
Definition: 1-exp( -(x/scale)^shape )
NodeLocation: 320,384,1
NodeSize: 48,24
{!40600|Att_WikiHelpURL: [wiki]}

Function CumWeibullInv(p,shape ; scale : optional=1)
Title: Cum WeibullInv
Description: The inverse cumulative probability function for the Weibull distribution
Definition: scale * ( -ln(1-p) )^(1/shape)
NodeLocation: 336,440,1
NodeSize: 56,24
{!40600|Att_WikiHelpURL: [wiki]}

Text Te99911
Description: Cumulative functions for some discrete distributions:
NodeLocation: 136,512,-1
NodeSize: 112,20

Function CumGeometric(k : Number ; p : nonNegative)
Title: Cum Geometric
Description: The cumulative geometric distribution.  This returns the probability that you would see fewer than 1 Bernoulli success in k independent trials, where p is the probability of success in each trial.
Definition: (k>=0) * (1-(1-p)^k)
NodeLocation: 432,576,1
NodeSize: 64,24
WindState: 2,22,527,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function CumGeometricInv(u,p : nonNegative atom)
Title: Cum GeometricInv
Description: The inverse cumulative probability of a Geometric(p) distribution.  This returns the smallest number of trials, k, such that the probability of seeing k or fewer trials is greater than or equal to «u», given that the probability of success for each independent trial is «p».
Definition: var q := 1-p;~
if p>0 and q>0 then   Ceil( ln(1-u)/ln(q) )~
else if (q>0) then       Inf~
else                           1
NodeLocation: 432,632,1
NodeSize: 64,24
WindState: 2,102,83,476,420
{!40600|Att_WikiHelpURL: [wiki]}

Function CumNegativeBinomial(k,r,p)
Title: Cum NegativeBinomial
Description: The cumulative probability of a NegativeBinomial(r,p) distribution up to and including k.  This is the probability of seeing k or fewer successes by the time you've seen r failures, given that each independent Bernoulli trial has a probability of p of success.
Definition: (k>=0) * (1-BetaI(p,k+1,r))
NodeLocation: 600,576,1
NodeSize: 80,24
WindState: 2,70,541,678,376
{!40600|Att_WikiHelpURL: [wiki]}

Function CumNegativeBinomInv(u,r,p)
Title: Cum NegativeBinomialInv
Description: The inverse cumulative probability of a NegativeBinomial(r,p) distribution up to and including k.  Suppose you run an experiment until you see r failures, each trial having a probability p of success.  How many successes will you see?  This function computes the u'th fractile.  So for example, if you specify 20% for u, it would compute the number of successes, k, such that there is a 20% probability of seeing k or fewer successes.
Definition: Ceil( BetaIaInv(1-u, p, r) - 1 )
NodeLocation: 600,632,1
NodeSize: 88,24
WindState: 2,68,83,522,361
{!40600|Att_WikiHelpURL: [wiki]}

Alias New1411399889
Title: Cum WeibullInv
Definition: 1
NodeLocation: 512,440,1
NodeSize: 72,24
NodeColor: 58978,52427,65535
Original: CumWilcoxonInv
{!40600|Att_WikiHelpURL: [wiki]}

Alias New1411399886
Title: Cum Weibull
Definition: 1
NodeLocation: 504,384,1
NodeSize: 64,24
NodeColor: 58978,52427,65535
Original: CumWilcoxon
{!40600|Att_WikiHelpURL: [wiki]}

Function CumGamma(x : Number atom ; ~
alpha:NonNegative atom;~
beta:recommended positive atom ; ~
over : ... optional named atomic )
Title: Cum Gamma
Description: The cumulative gamma distribution function. Gamma is a distribution on the positive reals.~
~
«x» Point to compute for. Returns to probability of the value being less than or equal to «x».~
«alpha» is the shape parameter. «alpha»=1 is an exponential distribution. «alpha»>1 is a unimodal distribution, approaching a normal distribution as «alpha» approaches infinity.~
«beta» is an optional scale factor (default=1.0).
Definition: (x>=0) * GammaI( Max([x,0]), alpha, beta )
NodeLocation: 608,232,1
NodeSize: 56,24
WindState: 2,23,555,865,355

Alias CumPoisson1444265767
NodeLocation: 248,632,1
NodeSize: 72,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,
NodeColor: 58978,52427,65535
Original: CumPoissonInv

Alias CumPoisson1452116650
NodeLocation: 248,576,1
NodeSize: 72,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,
NodeColor: 58978,52427,65535
Original: CumPoisson

Alias CumBinomia1452116723
NodeLocation: 96,576,1
NodeSize: 72,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,
NodeColor: 58978,52427,65535
Original: CumBinomial

Alias CumBinomia1452116728
NodeLocation: 96,632,1
NodeSize: 72,24
NodeInfo: 1,1,1,1,1,1,0,0,0,0,
NodeColor: 58978,52427,65535
Original: CumBinomialInv

Function CumGammaInv(p : Number atom ; ~
alpha:NonNegative atom;~
beta:recommended positive atom ; ~
over : ... optional named atomic )
Title: Cum GammaInv
Description: The inverse cumulative gamma distribution function. Gamma is a distribution on the positive reals.~
~
«p» Probability. Returns the value x such that the probability of being less than or equal to x is «p».~
«alpha» is the shape parameter. «alpha»=1 is an exponential distribution. «alpha»>1 is a unimodal distribution, approaching a normal distribution as «alpha» approaches infinity.~
«beta» is an optional scale factor (default=1.0).
Definition: if p<0 then 0 else if p>1 then INF else GammaIInv( p, alpha, beta )
NodeLocation: 608,288,1
NodeSize: 56,24
WindState: 2,23,555,865,355

Function CumBernoulli( x : Number ; p : Positive  )
Title: Cum Bernoulli
Description: The probability that the outcome of a Bernoulli(«p») is less than or equal to «x».
Definition: if x<0 Then 0 else if x<1 then 1-p else 1
NodeLocation: 768,576,1
NodeSize: 64,24

Function CumBernoulliInv( u : number ; p : positive)
Title: Cum BernoulliInv
Description: Returns the smallest Bernoulli(«p») outcome x (either 0 or 1) such that the probability P( n <= x) is greater than or equal to «u» when n is distributed as Bernoulli(p).
Definition: u>1-p
NodeLocation: 768,632,1
NodeSize: 64,24

Function CumBeta(x : Number atom ; ~
a,b:Numeric atom;~
lb,ub : optional atom;~
over : ... optional named atomic )
Title: Cum Beta
Description: The cumulative beta distribution function. Beta is a distribution bounded on both sides (usually for quantities between 0 and 1). ~
~
«a», «b» are the distribution parameters that determine the shape. They must be positive.~
«lb», «ub» are optional lower and upper bounds for the quantity.
Definition: if IsNotSpecified(lb) Then lb := 0;~
if IsNotSpecified(ub) Then ub := 1;~
if lb>ub then ( Var tmp:=lb; lb:=ub; ub:=tmp; );~
if x<lb then 0 ~
else if x >= ub then 1~
Else ~
	BetaI( (x-lb)/(ub-lb), a, b )~

NodeLocation: 480,232,1
NodeSize: 56,24
WindState: 2,23,406,865,504

Function CumBetaInv(p : Number atom ; ~
a,b:Numeric atom;~
lb,ub : optional atom;~
over : ... optional named atomic )
Title: Cum BetaInv
Description: The inverse cumulative beta distribution function. Beta is a distribution bounded on both sides (usually for quantities between 0 and 1). ~
~
«p» Probability. Returns the value x such that the probability of being less than or equal to x is «p».~
«a», «b» are the distribution parameters that determine the shape. They must be positive.~
«lb», «ub» are optional lower and upper bounds for the quantity.
Definition: if IsNotSpecified(lb) Then lb := 0;~
if IsNotSpecified(ub) Then ub := 1;~
if lb>ub then ( Var tmp:=lb; lb:=ub; ub:=tmp; );~
~
if p<=0 then lb~
else if p>=1 then ub~
else BetaIInv( p, a, b ) * (ub-lb) + lb
NodeLocation: 480,288,1
NodeSize: 56,24
WindState: 2,707,500,865,355

Close Cumulative_densities

Library Distribution_densit1
Title: Distribution Densities
Author: Lonnie
Date: Wed, Aug 06, 2008 12:30 PM
DefaultSize: 48,24
NodeLocation: 80,48,1
NodeSize: 56,24
DiagState: 2,118,47,827,633,17

Function LDens_Wishart(x,cv : Number[I,J] ; n : positive ; I,J : Index)
Title: LDens_Wishart(x,cv,n,I,J)
Description: The natural log of the density of a Wishart distribution at x.  X in this case is a 2-D matrix indexed by I and J.   (X is usually a scatter matrix). Cv must be positive-definite.~
~
The actual density is given by Exp( LnDens_Wishart( x,cv,n,I,J) ), but beware that this is usually a very small number and may underflow the limits of the computer's numeric precision.
Definition: var isPosDefinite := Min(EigenDecomp(x+Transpose(x,I,J),I,J)[.item='value']>0,J);~
if isPosDefinite then begin~
  var p:=size(I);~
  var tr := Sum(MatrixMultiply(Invert(cv,I,J),I,J,x,I,J)[J=I],I);~
  var logdet := ln(Determinant(cv,I,J));~
  var logp := logdet*(0.5*(n-p-1)) + ( -0.5 * tr ) - ln(2) * (0.5*n*p) - ln(Pi)*(p*(p-1)/4) - logdet*(0.5*n) - sum( LGamma(0.5*(n+1-I)), I ) ;~
  exp(logp)~
end ~
  else -INF
NodeLocation: 136,520,1
NodeSize: 72,24
WindState: 2,102,90,693,313
{!40600|Att_WikiHelpURL: [wiki]}

Function LDens_InvertedWishar(x,psi : Number[I,J] ; n : positive ; I,J : index)
Title: LDens_InvertedWishart(x,Psi,n,I,J)
Description: The natural log of the density of the Inverted Wishart distribution.  Psi must be positive-definite. The density is zero (ln density -INF) when x is not positive-definite.
Definition: var isPosDefinite := Min(EigenDecomp(x+Transpose(x,I,J),I,J)[.item='value']>0,J);~
if isPosDefinite then begin~
  var p := size(I);~
  var logDetPsi := ln(Determinant(Psi,I,J));~
  var logDetX := ln(Determinant(X,I,J));~
  var tr := sum( -0.5 * MatrixMultiply(Psi,I,J, Invert(x,I,J),I,J)[J=I],I);~
  logDetPsi * (0.5*n) + logDetX * (-0.5*(n+p+1)) + (-0.5*tr)~
  - ln(2)*(0.5*n*p) - ln(Pi)*(p*(p-1)/4) - sum( LGamma(0.5*(n+1-I)), I ) ;~
end ~
  else -INF
NodeLocation: 136,576,1
NodeSize: 96,24
WindState: 2,101,410,476,224
{!40600|Att_WikiHelpURL: [wiki]LDens_InvertedWishart}

Function Dens_Normal(x,m,sd : numeric orNull)
Title: Dens_Normal(x,m,sd)
Description: The density of a uniform distribution.~
This function has been superceded by the built-in function DensNormal(x,m,sd).
Definition: 1/(abs(sd)*sqrt(2*Pi) ) * exp( - 0.5 * ( (x-m)/sd)^2 )
NodeLocation: 88,112,1
NodeSize: 64,24
WindState: 2,4,231,840,385
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Uniform(x,min,max:Numeric orNull ; integer : optional boolean = false)
Title: Dens_Uniform~
(x,min,max)
Description: The probability density of x in a uniform distribution.  If the parameter integer is supplied and specified as false, then the probability of a discrete uniform distribution is returned.
Definition: (min <= x and x<= max) * (~
   if integer then   1/(floor(max)-ceil(min)+1)~
   else 1/(max-min)~
)
NodeLocation: 224,112,1
NodeSize: 64,24
WindState: 2,98,83,597,363
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Beta(x,a,b : scalar orNull ; lower : optional atom=0, upper : optional atom= 1)
Title: Dens_Beta~
(x,a,b)
Description: The density of a beta distribution at x.
Definition: var span:=upper-lower;~
x := (x-lower) / span;~
~
If 0<=x<=1 then (~
  var lax := if a>1 then (a-1)*ln(x) else 0;~
  var  ax := if a<=1  then  x^(a-1) else 1;~
  var lbx := if b>1 then (b-1)*ln(1-x) else 0;~
  var  bx := if b<=1  then (1-x)^(b-1) else 1;~
  var lbeta := LGamma(a) + LGamma(b) - LGamma(a+b);~
  exp( lax + lbx - lbeta ) * ax * bx / span;~
) else if x=null then null~
else 0
NodeLocation: 216,48,1
NodeSize: 56,24
WindState: 2,405,156,765,439
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_Bernoulli(x ; p : NonNegative orNull)
Title: Prob_Bernoulli~
(x,p)
Description: The probability of a Bernoulli distribution with parameter p at x.  Since a Bernoulli sample consists of 0s and 1s only, the probability is zero everywhere except at x=0 and x=1.
Definition: if x=null or p=null then null~
else if x=0 then (1-p)~
else if x=1 then p~
else 0
NodeLocation: 88,48,1
NodeSize: 64,24
WindState: 2,574,62,514,279
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_Binomial(x : Number orNull ; n,p : NonNegative OrNull)
Title: Prob_Binomial(x,n,p)
Description: The probability that x positive events occur in a Binomial sample of size n drawn, where the independent probability of drawing a positive sample in each draw is p.
Definition: if x<0 or x>n then 0 ~
else if n>1000 then~
	{ Work in log-space to avoid numeric overflow }~
	if p=0 Then~
		x=0~
	Else if p=1 Then ~
		x=n~
	Else~
		Exp( lgamma(n+1) - lgamma(x+1) - lgamma(n-x+1) + x*ln(p) + (n-x)*ln(1-p) )~
	 ~
else Combinations(x,n) * p^x * (1-p)^(n-x)
NodeLocation: 344,48,1
NodeSize: 64,24
WindState: 2,267,221,805,439
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_ChanceDist(x ; p:NonNegative orNull[I] ; A : Array[I] ; I : Index = Common)
Title: Prob_ChanceDist~
(x,P,A,I)
Description: Returns the probability that a sample from ChanceDist(p,A,I) is x.
Definition: var j := subIndex(A,x,I);~
if IsUndef(j) then 0~
else p[I=j] / sum(p,I)
NodeLocation: 376,112,1
NodeSize: 80,24
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_ChiSquared(x ; dof : positive orNull)
Title: Dens_ChiSquared~
(x,dof)
Description: Returns the probability at x of a chi-squared distribution with dof degrees of freedom.
Definition: 0.5^(dof/2) / Gammafn( dof/2 ) * x^(dof/2-1) * exp(-0.5 * x)
NodeLocation: 104,176,1
NodeSize: 80,24
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Exponential(x,rate : numeric orNull)
Title: Dens_Exponential~
(x,rate)
Description: The density of an exponential distribution with the given rate parameter at x.
Definition: rate * (x>=0) * exp(-rate * x)
NodeLocation: 272,176,1
NodeSize: 80,24
WindState: 2,386,125,573,308
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Gamma(x : number orNull; alpha : positive orNull; beta : optional = 1 )
Title: Dens_Gamma~
(x,a,b)
Description: The probability density of a gamma(alpha,beta) distribution at x.
Definition: beta^(-alpha) * x^(alpha-1) * (x>=0) * exp(-x/beta) / gammafn(alpha)
NodeLocation: 104,240,1
NodeSize: 64,24
WindState: 2,473,89,634,308
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Gaussian(x,m : Number OrNull[I] ; cv : Number[I,J] ; I,J : Index)
Title: Dens_Gaussian~
(x,m,cv,I,J)
Description: The probability density of a point x in a mult-variate Gaussian distribution.  m is the mean vector, cv the covariance matrix defining the Gaussian.
Definition: var N := size(I);~
if max(x=null or m=null,I) then null else~
1/ sqrt( (2*Pi)^N * Determinant(cv,I,J) ) * ~
exp( -1/2 * sum( sum( (x-m)[I=J]*Invert(cv,I,J), J) * (x-m), I ) )
NodeLocation: 256,240,1
NodeSize: 72,24
WindState: 2,319,347,599,406
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_LogNormal(x ; median,gsdev,mean,stddev : optional atomic)
Title: Dens_LogNormal~
(x,median,gsdev)
Description: The density of the Log Normal distribution.~
This function has been superceded by the built-in function DensLogNormal(...)
Definition: if IsNotSpecified(median)+IsNotSpecified(gsdev)+~
    IsNotSpecified(mean)+IsNotSpecified(stddev)<>2 ~
then Error("You must specify exactly two of the distribution parameters to Dens_LogNormal");~
~
if AnalyticaVersion>=50103 Then~
	DensLogNormal(x,median,gsdev,mean,stddev)~
Else begin~
~
	var w := 0;~
	if not IsNotSpecified(mean) and not IsNotSpecified(stddev) then (~
	   w := (stddev/mean)^2+1~
	);~
	~
	if IsNotSpecified(median) then (~
	  median := if IsNotSpecified(gsdev) then mean/sqrt(w)~
	                  else if IsNotSpecified(mean) then (~
	                            var tmp := exp(ln(gsdev)^2);~
	                            stddev/sqrt(tmp*(tmp-1))~
	                   ) else mean * exp(-ln(gsdev)^2/2)~
	);~
	~
	if IsNotSpecified(gsdev) then  (~
	  gsdev := if IsNotSpecified(median) then exp(sqrt(ln(w)))~
	                 else if IsNotSpecified(mean) then exp(sqrt(ln(1+sqrt(1+4*(stddev/median)^2))/2))~
	                 else exp(sqrt(2*ln(mean/median)))~
	);~
	~
	Dens_Normal(ln(x),ln(median),ln(gsdev))/x~
end
NodeLocation: 256,376,1
NodeSize: 80,24
WindState: 2,95,79,682,723
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Weibull( x : scalar ; shape : positive ; scale : optional positive )
Title: Dens Weibull(x,shape,scale)
Description: The probability density of the Weibull distribution at a point x.
Definition: if x<0 then 0~
else (~
  shape / scale * (x/scale)^(shape-1) * exp( -(x/scale)^shape )~
)
NodeLocation: 304,520,1
NodeSize: 72,24
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_StudentT(x,dof)
Title: Dens_StudentT~
(x,dof)
Description: The probability density at x of the Student's T distribution with dof degrees of freedom.
Definition: var c := (dof+1)/2;~
GammaFn( c )~
/ ( Sqrt(dof*Pi) * GammaFn(dof/2) )~
* ( 1+x^2/dof) ^ -c
NodeLocation: 96,440,1
NodeSize: 72,24
WindState: 2,589,819,475,294
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Triangular(x,min,mode,max)
Title: Dens_Triangular~
(x,min,mode,max)
Description: The probability density at x of a Triangular distribution.
Definition: var h := 2/(max-min);~
~
if x<min or x>max then 0~
else if x<mode then (x-min) * h / (mode-min)~
else (max-x) * h / (max-mode)
NodeLocation: 264,440,1
NodeSize: 80,24
WindState: 2,599,453,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_Logistic(x,mean ; scale : optional=1)
Title: Dens_Logistic~
(x,mean,scale)
Description: The probability density at x of a logistic distribution
Definition: var ex:= exp(-(x-mean)/scale );~
ex / ( scale * (1+ex)^2 )
NodeLocation: 104,376,1
NodeSize: 64,24
WindState: 2,560,470,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_CumDist(x : Reduced ; P:NonNegative[I,Run] ; R : ascending Numeric[I,Run] ;~
I : Index = Common ; Smooth : optional boolean[] = true )
Title: Dens CumDist~
(x,P,R,I)
Description: The probability density at point x in a custom distribution defined using the CumDist function.~
~
Currently this uses a very inefficient and noisy method for the smooth=true case (including when smooth isn't specified).
Definition: var eps := (Max(R,I) - Min(R,I)) * 1e-6;~
if smooth then begin~
  { This method doesn't seem to work -- seems like the way to do it though }~
  if AnalyticaVersion>=40102 then ~
      ( MonoCubicInterp( R, P, x+Eps/2, I ) - MonoCubicInterp( R,P,x-Eps/2, I)) / Eps~
  else (~
      { Here is an alternative approximate method for now.  Unfortunately, it isn't very Analytic }~
      { Necessary because MonoCubicInterp doesn't work prior to release 4.1.2 }~
      Index J := 1..max([500,10*size(I)]);~
     var df := Pdf(Random(CumDist(P,R,I,over:J)),J,samplesPerStep:20,binMethod:1);  ~
     LinearInterp( df[DensityIndex='X'], df[DensityIndex='Y'], x, df.Step )~
  )~
end Else~
   ( LinearInterp( R, P, x+Eps/2, I ) - LinearInterp( R,P,x-Eps/2, I)) / Eps~

NodeLocation: 544,112,1
NodeSize: 80,24
WindState: 2,198,164,666,650
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_Poisson(x,mean)
Title: Prob_Poisson~
(x,mean)
Description: The probability at the integer value x of a Poisson distribution.
Definition: if abs(Round(x)-x) > 1e-6 then 0~
else if mean=0 then x=0~
else (~
  exp( -mean + x*ln(mean) - LGamma(x+1) )~
)
NodeLocation: 432,376,1
NodeSize: 64,24
WindState: 2,42,710,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_ProbDist(x : Reduced ; ~
P : NonNegative[I,Run] ; R : Numeric[I,Run] ; I : Index = Common )
Title: Dens ProbDist~
(x,P,R,I)
Description: The probability density at x in a distribution defined by ProbDist(P,R,I)
Definition: if x=null then null ~
else if x<Min(R,I) or x>Max(R,I) then 0~
else ( ~
   var a := LinearInterp(R,P,x,I);~
   index J := CopyIndex(R); ~
   a / Area(P[@I=@J],J)~
)
NodeLocation: 592,376,1
NodeSize: 80,24
WindState: 2,525,87,513,359
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_Geometric(k,p)
Title: Prob_Geometric~
(k,p)
Description: The probability at point k in a Geometric(p) discrete distribution.
Definition: if k<0 or abs(round(k)-k)>1e-6 then 0~
else (1-p)^(k-1) * p
Check: p>=0 and p<=1
NodeLocation: 408,240,1
NodeSize: 72,24
WindState: 2,798,3,476,224
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_HyperGeometric(k,trials,posEvents,size : atomic)
Title: Prob_Hypergeometric~
(k,trials,posEvents,size)
Description: The probability at point k in a HyperGeometric(trials,posEvents,size) discrete distribution.
Definition: if k<0 or k>posEvents or trials-k > size-posEvents or abs(round(k)-k)>1e-6 ~
then 0~
else ~
   Combinations(k,posEvents) ~
   * Combinations(trials-k,size-posEvents)~
   / Combinations( trials,size)
NodeLocation: 120,304,1
NodeSize: 96,24
WindState: 2,761,109,571,260
{!40600|Att_WikiHelpURL: [wiki]}

Function Dens_FDist(x,d1,d2)
Title: Dens_FDist~
(x,d1,d2)
Description: The probability density at x of an F-distribution with d1 and d2 degrees of freedom.~
~
Note that the F-distribution is not a built-in distribution in Analytica.
Definition: exp( 0.5 * ~
   (d1 * ln(d1*x) + d2*ln(d2) - (d1+d2)*ln(d1*x+d2) ) )~
/~
( x * BetaFn( d1/2, d2/2 ) )
NodeLocation: 416,176,1
NodeSize: 56,24
WindState: 2,443,69,494,301
{!40600|Att_WikiHelpURL: [wiki]}

Function Prob_NegativeBinomia(k : scalar ; r,p : nonNegative atom)
Title: Prob NegativeBinomial
Description: The probability of seeing k successes by the time r failures occur when each independent Bernoulli trial has a probability p of success.
Definition: if k<0 then 0~
else if k+r<=50 then~
   Combinations(k,k+r-1) * p^k * (1-p)^r ~
else ~
   BetaI(p,k,r) - BetaI(p,k+1,r)
NodeLocation: 568,240,1
NodeSize: 80,24
WindState: 2,102,83,475,253
{!40600|Att_WikiHelpURL: [wiki]Prob_NegativeBinomial}

Alias New1411399887
Title: Dens Weibull(x,shape,scale)
Definition: 1
NodeLocation: 480,520,1
NodeSize: 72,24
NodeColor: 58978,52427,65535
Original: ProbWilcoxon
{!40600|Att_WikiHelpURL: [wiki]}

Close Distribution_densit1

Close Distribution_densiti

Text Te1556127265
Title: Hemos agregado (File --> Add Library: Distribution Densities) por cuanto en el nodo Binomial = 11 hacemos uso de la instrucción Prob_Binomial() que no está de manera estándar y por ello hay que agregar esta librería o biblioteca de funciones o instrucciones adicionales.
NodeLocation: 768,224,-1
NodeSize: 144,96
NodeInfo: 1,,,,,1
NodeColor: 52427,62259,65535

Chance Binomial7
Title: Binomial(11, 0.8) = 0..5
Description: Método alternativo de cálculo de cada probabilidad Binomial(11, 0.8) = 0, ... Binomial(11, 0.8) = 5.~
Con la instrucción 0..5, le pedimos que nos dé los resultados cuando es igual desde cero (0) hasta cinco (5).
Definition: Binomial(11,.8) =0..5
NodeLocation: 408,56,1
NodeSize: 72,32
ValueState: 2,675,45,416,303,,MEAN
NodeColor: 32770,65535,1
NumberFormat: 2,F,4,4,0,0,4,1,$,0,"ABBREV",0,,,0,0,15
Att__TotalsIndex: [Self]

Close Mest_5_1_Overbooking

